name: Check for Upstream Updates
on: [push]  # TODO replace with cron job

jobs:
  check-versions:
    name: Check Upstream Dependencies for Updates
    runs-on: ubuntu-latest
    outputs:
        branch-name: ${{ steps.define-branch-name.outputs.branch-name }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tensorflow version
        id: latest-tensorflow-version
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: tensorflow/tensorflow
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tflite support version
        id: latest-tflite-support-version
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: tensorflow/tflite-support
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Define branch name if versions changed
        id: define-branch-name
        shell: bash
        run: |
          latest_tf_version="${{ steps.latest-tensorflow-version.outputs.release }}"
          latest_tflite_support_version="${{ steps.latest-tflite-support-version.outputs.release }}"
          tf_version=$(sed -n 's/^tensorflow:\(.*\)/\1/p' versions.txt 2>&1 || true)
          echo "current tensorflow version is $tf_version"
          tflite_support_version=$(sed -n 's/^tflite-support:\(.*\)/\1/p' versions.txt 2>&1 || true)
          echo "current tflite-support version is $tflite_support_version"
          if [[ ${tf_version} != "${latest_tf_version}" ]]; then
            tf_changed="true"
            echo "tensorflow version changed to ${latest_tf_version}"
          fi
          if [[ ${tflite_support_version} != "${latest_tflite_support_version}" ]]; then
            tf_lite_support_changed="true"
            echo "tflite-support version changed to ${latest_tflite_support_version}"
          fi
          if [[ -n ${tf_changed} || -n ${tf_lite_support_changed} ]]; then
            branch_name="version-update/${latest_tf_version}/${latest_tflite_support_version}"
            echo "branch name is ${branch_name}"
            echo "branch-name=${branch_name}" >> $GITHUB_OUTPUT
          else
            echo "no newer versions found"
          fi

  # Only if there were any new releases, download schemata and check for updates - if so, create a new PR
  check-schemata:
    name: Check Schemata for Updates
    runs-on: ubuntu-latest
    needs: check-versions
    env:
      python_version: 3.10.10
    if: needs.check-versions.outputs.branch-name != ''
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - id: cache-venv
        name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: ./.venv/
          key: ${{ runner.os }}-${{ env.python_version }}-venv-${{ hashFiles('requirements.txt', 'setup.py') }}-v1

      - name: Make virtual environment with dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        shell: bash
        run: |
          pip install --upgrade pip
          python -m venv ./.venv
          source ./.venv/bin/activate
          pip install -e ".[build]"

      - name: Update Schemata
        shell: bash
        run: |
          source ./.venv/bin/activate
          python -m builder update

      - name: Check if there are changes
        id: changes
        shell: bash
        run: |
          changes=$(git diff --name-only src/tflite_metadata/schema/)
          if [[ -n ${changes} ]]; then
            any_changed="true"
          else
            any_changed="false"
          fi
          echo "any_changed=${any_changed}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.changes.outputs.any_changed == 'true'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: update schemata and version file
          committer: CI[bot] <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: ${{ needs.check-versions.outputs.branch-name }}
          delete-branch: true
          title: 'Update to upstream changes'
          body: Auto-generated by CI
          assignees: christian-steinmeyer
          reviewers: christian-steinmeyer
          add-paths: |
            src/tflite_metadata/schema/*.fbs
