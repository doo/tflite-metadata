# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScoreCalibrationOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScoreCalibrationOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScoreCalibrationOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ScoreCalibrationOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed)

    # ScoreCalibrationOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScoreCalibrationOptions
    def ScoreTransformation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ScoreCalibrationOptions
    def DefaultScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ScoreCalibrationOptionsStart(builder): builder.StartObject(2)
def Start(builder):
    return ScoreCalibrationOptionsStart(builder)
def ScoreCalibrationOptionsAddScoreTransformation(builder, scoreTransformation): builder.PrependInt8Slot(0, scoreTransformation, 0)
def AddScoreTransformation(builder, scoreTransformation):
    return ScoreCalibrationOptionsAddScoreTransformation(builder, scoreTransformation)
def ScoreCalibrationOptionsAddDefaultScore(builder, defaultScore): builder.PrependFloat32Slot(1, defaultScore, 0.0)
def AddDefaultScore(builder, defaultScore):
    return ScoreCalibrationOptionsAddDefaultScore(builder, defaultScore)
def ScoreCalibrationOptionsEnd(builder): return builder.EndObject()
def End(builder):
    return ScoreCalibrationOptionsEnd(builder)

class ScoreCalibrationOptionsT(object):

    # ScoreCalibrationOptionsT
    def __init__(self):
        self.scoreTransformation = 0  # type: int
        self.defaultScore = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scoreCalibrationOptions = ScoreCalibrationOptions()
        scoreCalibrationOptions.Init(buf, pos)
        return cls.InitFromObj(scoreCalibrationOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scoreCalibrationOptions):
        x = ScoreCalibrationOptionsT()
        x._UnPack(scoreCalibrationOptions)
        return x

    # ScoreCalibrationOptionsT
    def _UnPack(self, scoreCalibrationOptions):
        if scoreCalibrationOptions is None:
            return
        self.scoreTransformation = scoreCalibrationOptions.ScoreTransformation()
        self.defaultScore = scoreCalibrationOptions.DefaultScore()

    # ScoreCalibrationOptionsT
    def Pack(self, builder):
        ScoreCalibrationOptionsStart(builder)
        ScoreCalibrationOptionsAddScoreTransformation(builder, self.scoreTransformation)
        ScoreCalibrationOptionsAddDefaultScore(builder, self.defaultScore)
        scoreCalibrationOptions = ScoreCalibrationOptionsEnd(builder)
        return scoreCalibrationOptions
