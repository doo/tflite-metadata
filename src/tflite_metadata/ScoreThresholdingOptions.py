# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScoreThresholdingOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScoreThresholdingOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScoreThresholdingOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ScoreThresholdingOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed)

    # ScoreThresholdingOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScoreThresholdingOptions
    def GlobalScoreThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ScoreThresholdingOptionsStart(builder): builder.StartObject(1)
def Start(builder):
    return ScoreThresholdingOptionsStart(builder)
def ScoreThresholdingOptionsAddGlobalScoreThreshold(builder, globalScoreThreshold): builder.PrependFloat32Slot(0, globalScoreThreshold, 0.0)
def AddGlobalScoreThreshold(builder, globalScoreThreshold):
    return ScoreThresholdingOptionsAddGlobalScoreThreshold(builder, globalScoreThreshold)
def ScoreThresholdingOptionsEnd(builder): return builder.EndObject()
def End(builder):
    return ScoreThresholdingOptionsEnd(builder)