# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class TensorMetadata(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def TensorMetadataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed
        )

    # TensorMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorMetadata
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TensorMetadata
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TensorMetadata
    def DimensionNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TensorMetadata
    def DimensionNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorMetadata
    def DimensionNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TensorMetadata
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from tflite.Content import Content

            obj = Content()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TensorMetadata
    def ProcessUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from tflite.ProcessUnit import ProcessUnit

            obj = ProcessUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TensorMetadata
    def ProcessUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorMetadata
    def ProcessUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # TensorMetadata
    def Stats(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from tflite.Stats import Stats

            obj = Stats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TensorMetadata
    def AssociatedFiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from tflite.AssociatedFile import AssociatedFile

            obj = AssociatedFile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TensorMetadata
    def AssociatedFilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorMetadata
    def AssociatedFilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0


def TensorMetadataStart(builder):
    builder.StartObject(7)


def Start(builder):
    return TensorMetadataStart(builder)


def TensorMetadataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)


def AddName(builder, name):
    return TensorMetadataAddName(builder, name)


def TensorMetadataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0
    )


def AddDescription(builder, description):
    return TensorMetadataAddDescription(builder, description)


def TensorMetadataAddDimensionNames(builder, dimensionNames):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionNames), 0
    )


def AddDimensionNames(builder, dimensionNames):
    return TensorMetadataAddDimensionNames(builder, dimensionNames)


def TensorMetadataStartDimensionNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartDimensionNamesVector(builder, numElems):
    return TensorMetadataStartDimensionNamesVector(builder, numElems)


def TensorMetadataAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0
    )


def AddContent(builder, content):
    return TensorMetadataAddContent(builder, content)


def TensorMetadataAddProcessUnits(builder, processUnits):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(processUnits), 0
    )


def AddProcessUnits(builder, processUnits):
    return TensorMetadataAddProcessUnits(builder, processUnits)


def TensorMetadataStartProcessUnitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartProcessUnitsVector(builder, numElems):
    return TensorMetadataStartProcessUnitsVector(builder, numElems)


def TensorMetadataAddStats(builder, stats):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stats), 0)


def AddStats(builder, stats):
    return TensorMetadataAddStats(builder, stats)


def TensorMetadataAddAssociatedFiles(builder, associatedFiles):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(associatedFiles), 0
    )


def AddAssociatedFiles(builder, associatedFiles):
    return TensorMetadataAddAssociatedFiles(builder, associatedFiles)


def TensorMetadataStartAssociatedFilesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartAssociatedFilesVector(builder, numElems):
    return TensorMetadataStartAssociatedFilesVector(builder, numElems)


def TensorMetadataEnd(builder):
    return builder.EndObject()


def End(builder):
    return TensorMetadataEnd(builder)


import tflite.AssociatedFile
import tflite.Content
import tflite.ProcessUnit
import tflite.Stats

try:
    pass
except:
    pass


class TensorMetadataT(object):

    # TensorMetadataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.dimensionNames = None  # type: List[str]
        self.content = None  # type: Optional[tflite.Content.ContentT]
        self.processUnits = None  # type: List[tflite.ProcessUnit.ProcessUnitT]
        self.stats = None  # type: Optional[tflite.Stats.StatsT]
        self.associatedFiles = None  # type: List[tflite.AssociatedFile.AssociatedFileT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tensorMetadata = TensorMetadata()
        tensorMetadata.Init(buf, pos)
        return cls.InitFromObj(tensorMetadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos + n)

    @classmethod
    def InitFromObj(cls, tensorMetadata):
        x = TensorMetadataT()
        x._UnPack(tensorMetadata)
        return x

    # TensorMetadataT
    def _UnPack(self, tensorMetadata):
        if tensorMetadata is None:
            return
        self.name = tensorMetadata.Name()
        self.description = tensorMetadata.Description()
        if not tensorMetadata.DimensionNamesIsNone():
            self.dimensionNames = []
            for i in range(tensorMetadata.DimensionNamesLength()):
                self.dimensionNames.append(tensorMetadata.DimensionNames(i))
        if tensorMetadata.Content() is not None:
            self.content = tflite.Content.ContentT.InitFromObj(tensorMetadata.Content())
        if not tensorMetadata.ProcessUnitsIsNone():
            self.processUnits = []
            for i in range(tensorMetadata.ProcessUnitsLength()):
                if tensorMetadata.ProcessUnits(i) is None:
                    self.processUnits.append(None)
                else:
                    processUnit_ = tflite.ProcessUnit.ProcessUnitT.InitFromObj(
                        tensorMetadata.ProcessUnits(i)
                    )
                    self.processUnits.append(processUnit_)
        if tensorMetadata.Stats() is not None:
            self.stats = tflite.Stats.StatsT.InitFromObj(tensorMetadata.Stats())
        if not tensorMetadata.AssociatedFilesIsNone():
            self.associatedFiles = []
            for i in range(tensorMetadata.AssociatedFilesLength()):
                if tensorMetadata.AssociatedFiles(i) is None:
                    self.associatedFiles.append(None)
                else:
                    associatedFile_ = tflite.AssociatedFile.AssociatedFileT.InitFromObj(
                        tensorMetadata.AssociatedFiles(i)
                    )
                    self.associatedFiles.append(associatedFile_)

    # TensorMetadataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.dimensionNames is not None:
            dimensionNameslist = []
            for i in range(len(self.dimensionNames)):
                dimensionNameslist.append(builder.CreateString(self.dimensionNames[i]))
            TensorMetadataStartDimensionNamesVector(builder, len(self.dimensionNames))
            for i in reversed(range(len(self.dimensionNames))):
                builder.PrependUOffsetTRelative(dimensionNameslist[i])
            dimensionNames = builder.EndVector()
        if self.content is not None:
            content = self.content.Pack(builder)
        if self.processUnits is not None:
            processUnitslist = []
            for i in range(len(self.processUnits)):
                processUnitslist.append(self.processUnits[i].Pack(builder))
            TensorMetadataStartProcessUnitsVector(builder, len(self.processUnits))
            for i in reversed(range(len(self.processUnits))):
                builder.PrependUOffsetTRelative(processUnitslist[i])
            processUnits = builder.EndVector()
        if self.stats is not None:
            stats = self.stats.Pack(builder)
        if self.associatedFiles is not None:
            associatedFileslist = []
            for i in range(len(self.associatedFiles)):
                associatedFileslist.append(self.associatedFiles[i].Pack(builder))
            TensorMetadataStartAssociatedFilesVector(builder, len(self.associatedFiles))
            for i in reversed(range(len(self.associatedFiles))):
                builder.PrependUOffsetTRelative(associatedFileslist[i])
            associatedFiles = builder.EndVector()
        TensorMetadataStart(builder)
        if self.name is not None:
            TensorMetadataAddName(builder, name)
        if self.description is not None:
            TensorMetadataAddDescription(builder, description)
        if self.dimensionNames is not None:
            TensorMetadataAddDimensionNames(builder, dimensionNames)
        if self.content is not None:
            TensorMetadataAddContent(builder, content)
        if self.processUnits is not None:
            TensorMetadataAddProcessUnits(builder, processUnits)
        if self.stats is not None:
            TensorMetadataAddStats(builder, stats)
        if self.associatedFiles is not None:
            TensorMetadataAddAssociatedFiles(builder, associatedFiles)
        tensorMetadata = TensorMetadataEnd(builder)
        return tensorMetadata
