# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class BoundingBoxProperties(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoundingBoxProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBoundingBoxProperties(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def BoundingBoxPropertiesBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed
        )

    # BoundingBoxProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoundingBoxProperties
    def Index(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # BoundingBoxProperties
    def IndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # BoundingBoxProperties
    def IndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BoundingBoxProperties
    def IndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # BoundingBoxProperties
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # BoundingBoxProperties
    def CoordinateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0


def BoundingBoxPropertiesStart(builder):
    builder.StartObject(3)


def Start(builder):
    return BoundingBoxPropertiesStart(builder)


def BoundingBoxPropertiesAddIndex(builder, index):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(index), 0)


def AddIndex(builder, index):
    return BoundingBoxPropertiesAddIndex(builder, index)


def BoundingBoxPropertiesStartIndexVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartIndexVector(builder, numElems):
    return BoundingBoxPropertiesStartIndexVector(builder, numElems)


def BoundingBoxPropertiesAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)


def AddType(builder, type):
    return BoundingBoxPropertiesAddType(builder, type)


def BoundingBoxPropertiesAddCoordinateType(builder, coordinateType):
    builder.PrependInt8Slot(2, coordinateType, 0)


def AddCoordinateType(builder, coordinateType):
    return BoundingBoxPropertiesAddCoordinateType(builder, coordinateType)


def BoundingBoxPropertiesEnd(builder):
    return builder.EndObject()


def End(builder):
    return BoundingBoxPropertiesEnd(builder)


try:
    pass
except:
    pass


class BoundingBoxPropertiesT(object):

    # BoundingBoxPropertiesT
    def __init__(self):
        self.index = None  # type: List[int]
        self.type = 0  # type: int
        self.coordinateType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        boundingBoxProperties = BoundingBoxProperties()
        boundingBoxProperties.Init(buf, pos)
        return cls.InitFromObj(boundingBoxProperties)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos + n)

    @classmethod
    def InitFromObj(cls, boundingBoxProperties):
        x = BoundingBoxPropertiesT()
        x._UnPack(boundingBoxProperties)
        return x

    # BoundingBoxPropertiesT
    def _UnPack(self, boundingBoxProperties):
        if boundingBoxProperties is None:
            return
        if not boundingBoxProperties.IndexIsNone():
            if np is None:
                self.index = []
                for i in range(boundingBoxProperties.IndexLength()):
                    self.index.append(boundingBoxProperties.Index(i))
            else:
                self.index = boundingBoxProperties.IndexAsNumpy()
        self.type = boundingBoxProperties.Type()
        self.coordinateType = boundingBoxProperties.CoordinateType()

    # BoundingBoxPropertiesT
    def Pack(self, builder):
        if self.index is not None:
            if np is not None and type(self.index) is np.ndarray:
                index = builder.CreateNumpyVector(self.index)
            else:
                BoundingBoxPropertiesStartIndexVector(builder, len(self.index))
                for i in reversed(range(len(self.index))):
                    builder.PrependUint32(self.index[i])
                index = builder.EndVector()
        BoundingBoxPropertiesStart(builder)
        if self.index is not None:
            BoundingBoxPropertiesAddIndex(builder, index)
        BoundingBoxPropertiesAddType(builder, self.type)
        BoundingBoxPropertiesAddCoordinateType(builder, self.coordinateType)
        boundingBoxProperties = BoundingBoxPropertiesEnd(builder)
        return boundingBoxProperties
