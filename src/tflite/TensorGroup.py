# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class TensorGroup(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def TensorGroupBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed
        )

    # TensorGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorGroup
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TensorGroup
    def TensorNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TensorGroup
    def TensorNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TensorGroup
    def TensorNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0


def TensorGroupStart(builder):
    builder.StartObject(2)


def Start(builder):
    return TensorGroupStart(builder)


def TensorGroupAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)


def AddName(builder, name):
    return TensorGroupAddName(builder, name)


def TensorGroupAddTensorNames(builder, tensorNames):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(tensorNames), 0
    )


def AddTensorNames(builder, tensorNames):
    return TensorGroupAddTensorNames(builder, tensorNames)


def TensorGroupStartTensorNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartTensorNamesVector(builder, numElems):
    return TensorGroupStartTensorNamesVector(builder, numElems)


def TensorGroupEnd(builder):
    return builder.EndObject()


def End(builder):
    return TensorGroupEnd(builder)


try:
    pass
except:
    pass


class TensorGroupT(object):

    # TensorGroupT
    def __init__(self):
        self.name = None  # type: str
        self.tensorNames = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tensorGroup = TensorGroup()
        tensorGroup.Init(buf, pos)
        return cls.InitFromObj(tensorGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos + n)

    @classmethod
    def InitFromObj(cls, tensorGroup):
        x = TensorGroupT()
        x._UnPack(tensorGroup)
        return x

    # TensorGroupT
    def _UnPack(self, tensorGroup):
        if tensorGroup is None:
            return
        self.name = tensorGroup.Name()
        if not tensorGroup.TensorNamesIsNone():
            self.tensorNames = []
            for i in range(tensorGroup.TensorNamesLength()):
                self.tensorNames.append(tensorGroup.TensorNames(i))

    # TensorGroupT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tensorNames is not None:
            tensorNameslist = []
            for i in range(len(self.tensorNames)):
                tensorNameslist.append(builder.CreateString(self.tensorNames[i]))
            TensorGroupStartTensorNamesVector(builder, len(self.tensorNames))
            for i in reversed(range(len(self.tensorNames))):
                builder.PrependUOffsetTRelative(tensorNameslist[i])
            tensorNames = builder.EndVector()
        TensorGroupStart(builder)
        if self.name is not None:
            TensorGroupAddName(builder, name)
        if self.tensorNames is not None:
            TensorGroupAddTensorNames(builder, tensorNames)
        tensorGroup = TensorGroupEnd(builder)
        return tensorGroup
