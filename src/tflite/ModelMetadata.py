# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class ModelMetadata(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelMetadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModelMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def ModelMetadataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x4D\x30\x30\x31", size_prefixed=size_prefixed
        )

    # ModelMetadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelMetadata
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelMetadata
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelMetadata
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelMetadata
    def SubgraphMetadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from tflite.SubGraphMetadata import SubGraphMetadata

            obj = SubGraphMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelMetadata
    def SubgraphMetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelMetadata
    def SubgraphMetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ModelMetadata
    def Author(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelMetadata
    def License(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelMetadata
    def AssociatedFiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from tflite.AssociatedFile import AssociatedFile

            obj = AssociatedFile()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelMetadata
    def AssociatedFilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelMetadata
    def AssociatedFilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ModelMetadata
    def MinParserVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def ModelMetadataStart(builder):
    builder.StartObject(8)


def Start(builder):
    return ModelMetadataStart(builder)


def ModelMetadataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)


def AddName(builder, name):
    return ModelMetadataAddName(builder, name)


def ModelMetadataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0
    )


def AddDescription(builder, description):
    return ModelMetadataAddDescription(builder, description)


def ModelMetadataAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0
    )


def AddVersion(builder, version):
    return ModelMetadataAddVersion(builder, version)


def ModelMetadataAddSubgraphMetadata(builder, subgraphMetadata):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(subgraphMetadata), 0
    )


def AddSubgraphMetadata(builder, subgraphMetadata):
    return ModelMetadataAddSubgraphMetadata(builder, subgraphMetadata)


def ModelMetadataStartSubgraphMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartSubgraphMetadataVector(builder, numElems):
    return ModelMetadataStartSubgraphMetadataVector(builder, numElems)


def ModelMetadataAddAuthor(builder, author):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(author), 0
    )


def AddAuthor(builder, author):
    return ModelMetadataAddAuthor(builder, author)


def ModelMetadataAddLicense(builder, license):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(license), 0
    )


def AddLicense(builder, license):
    return ModelMetadataAddLicense(builder, license)


def ModelMetadataAddAssociatedFiles(builder, associatedFiles):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(associatedFiles), 0
    )


def AddAssociatedFiles(builder, associatedFiles):
    return ModelMetadataAddAssociatedFiles(builder, associatedFiles)


def ModelMetadataStartAssociatedFilesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartAssociatedFilesVector(builder, numElems):
    return ModelMetadataStartAssociatedFilesVector(builder, numElems)


def ModelMetadataAddMinParserVersion(builder, minParserVersion):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(minParserVersion), 0
    )


def AddMinParserVersion(builder, minParserVersion):
    return ModelMetadataAddMinParserVersion(builder, minParserVersion)


def ModelMetadataEnd(builder):
    return builder.EndObject()


def End(builder):
    return ModelMetadataEnd(builder)


import tflite.AssociatedFile
import tflite.SubGraphMetadata

try:
    pass
except:
    pass


class ModelMetadataT(object):

    # ModelMetadataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.version = None  # type: str
        self.subgraphMetadata = None  # type: List[tflite.SubGraphMetadata.SubGraphMetadataT]
        self.author = None  # type: str
        self.license = None  # type: str
        self.associatedFiles = None  # type: List[tflite.AssociatedFile.AssociatedFileT]
        self.minParserVersion = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        modelMetadata = ModelMetadata()
        modelMetadata.Init(buf, pos)
        return cls.InitFromObj(modelMetadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos + n)

    @classmethod
    def InitFromObj(cls, modelMetadata):
        x = ModelMetadataT()
        x._UnPack(modelMetadata)
        return x

    # ModelMetadataT
    def _UnPack(self, modelMetadata):
        if modelMetadata is None:
            return
        self.name = modelMetadata.Name()
        self.description = modelMetadata.Description()
        self.version = modelMetadata.Version()
        if not modelMetadata.SubgraphMetadataIsNone():
            self.subgraphMetadata = []
            for i in range(modelMetadata.SubgraphMetadataLength()):
                if modelMetadata.SubgraphMetadata(i) is None:
                    self.subgraphMetadata.append(None)
                else:
                    subGraphMetadata_ = tflite.SubGraphMetadata.SubGraphMetadataT.InitFromObj(
                        modelMetadata.SubgraphMetadata(i)
                    )
                    self.subgraphMetadata.append(subGraphMetadata_)
        self.author = modelMetadata.Author()
        self.license = modelMetadata.License()
        if not modelMetadata.AssociatedFilesIsNone():
            self.associatedFiles = []
            for i in range(modelMetadata.AssociatedFilesLength()):
                if modelMetadata.AssociatedFiles(i) is None:
                    self.associatedFiles.append(None)
                else:
                    associatedFile_ = tflite.AssociatedFile.AssociatedFileT.InitFromObj(
                        modelMetadata.AssociatedFiles(i)
                    )
                    self.associatedFiles.append(associatedFile_)
        self.minParserVersion = modelMetadata.MinParserVersion()

    # ModelMetadataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.subgraphMetadata is not None:
            subgraphMetadatalist = []
            for i in range(len(self.subgraphMetadata)):
                subgraphMetadatalist.append(self.subgraphMetadata[i].Pack(builder))
            ModelMetadataStartSubgraphMetadataVector(builder, len(self.subgraphMetadata))
            for i in reversed(range(len(self.subgraphMetadata))):
                builder.PrependUOffsetTRelative(subgraphMetadatalist[i])
            subgraphMetadata = builder.EndVector()
        if self.author is not None:
            author = builder.CreateString(self.author)
        if self.license is not None:
            license = builder.CreateString(self.license)
        if self.associatedFiles is not None:
            associatedFileslist = []
            for i in range(len(self.associatedFiles)):
                associatedFileslist.append(self.associatedFiles[i].Pack(builder))
            ModelMetadataStartAssociatedFilesVector(builder, len(self.associatedFiles))
            for i in reversed(range(len(self.associatedFiles))):
                builder.PrependUOffsetTRelative(associatedFileslist[i])
            associatedFiles = builder.EndVector()
        if self.minParserVersion is not None:
            minParserVersion = builder.CreateString(self.minParserVersion)
        ModelMetadataStart(builder)
        if self.name is not None:
            ModelMetadataAddName(builder, name)
        if self.description is not None:
            ModelMetadataAddDescription(builder, description)
        if self.version is not None:
            ModelMetadataAddVersion(builder, version)
        if self.subgraphMetadata is not None:
            ModelMetadataAddSubgraphMetadata(builder, subgraphMetadata)
        if self.author is not None:
            ModelMetadataAddAuthor(builder, author)
        if self.license is not None:
            ModelMetadataAddLicense(builder, license)
        if self.associatedFiles is not None:
            ModelMetadataAddAssociatedFiles(builder, associatedFiles)
        if self.minParserVersion is not None:
            ModelMetadataAddMinParserVersion(builder, minParserVersion)
        modelMetadata = ModelMetadataEnd(builder)
        return modelMetadata
